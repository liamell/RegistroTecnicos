@page "/Ticket/Delete/{TicketId:int}"
@using RegistroTecnicos.Models
@using RegistroTecnicos.Services
@inject TicketsService ticketsService
@inject TecnicosService tecnicosService
@inject ClientesService clientesService
@inject NavigationManager navigationManager
@rendermode InteractiveServer


<PageTitle> Eliminar Ticket</PageTitle>
<div class="container">
	<div class="card shadow-lg">

		@*Header*@
		<div class="card-header text-center">
			<h3><strong>Eliminar Ticket</strong></h3>
		</div>
		@*Body*@
		<div class="card-body">
			<div class="text-center">
				<h4><strong>Desea eliminar este Ticket?</strong></h4>
			</div>
			<ul class="mt-5">
				<li><strong>Id: </strong>@Ticket.TicketId</li>
				<li><strong>Fecha: </strong>@Ticket.Fecha</li>
				<li><strong>Pioridad: </strong>@Ticket.Prioridad</li>
				<li><strong>Cliente: </strong>@GetClienteNombre(Ticket.ClienteId)</li>
				<li><strong>Asunto: </strong>@Ticket.Asunto</li>
				<li><strong>Descripcion: </strong>@Ticket.Descripcion</li>
				<li><strong>TiempoInvertido: </strong>@Ticket.TiempoInvertido</li>
				<li><strong>TecnicoId: </strong>@GetTecnicoNombre(Ticket.TecnicoId)</li>
			</ul>
		</div>

		@*Footer*@
		<div class="card-footer text-center">
			<button type="button" class="btn btn-primary" @onclick="Volver">Volver</button>
			<button Type="button" Class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
		</div>
	</div>
</div>
@Mensaje


@code {
	[Parameter]
	public int TicketId { get; set; }
	public  Tickets Ticket { get; set; } = new Tickets();
	private List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
	private List<Tecnicos> ListaTecnicos { get; set; } = new List<Tecnicos>();
	public string Mensaje { get; set; } = string.Empty;

	
	protected override async Task OnInitializedAsync()
	{
		Ticket = await ticketsService.Buscar(TicketId);
		ListaClientes = await clientesService.Listar(c => true);
		ListaTecnicos = await tecnicosService.Listar(t => true);

	}


	private string GetClienteNombre(int clienteId)
	{
		var cliente = ListaClientes.FirstOrDefault(c => c.ClienteId == clienteId);
		return cliente != null ? cliente.Nombres : "Desconocido";
	}

	private string GetTecnicoNombre(int tecnicoId)
	{
		var tecnico = ListaTecnicos.FirstOrDefault(t => t.TecnicoId == tecnicoId);
		return tecnico != null ? tecnico.Nombres : "Desconocido";
	}


	private async Task Eliminar()
	{
		var eliminado = await ticketsService.Eliminar(TicketId);

		if (eliminado)
			Mensaje = "El Ticket ha sido eliminado correctamente";
		else

			Mensaje = "No se ha podido eliminar el Ticket";

	}

	public void Volver()
	{
		navigationManager.NavigateTo("/Ticket/Index");
	}


}
